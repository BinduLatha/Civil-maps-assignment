{"version":3,"file":"BinaryDecoderWorker.js","sources":["../../../src/Version.js","../../../src/loader/PointAttributes.js","../../../src/workers/BinaryDecoderWorker.js"],"sourcesContent":["\nexport class Version{\n\n\tconstructor(version){\n\t\tthis.version = version;\n\t\tlet vmLength = (version.indexOf('.') === -1) ? version.length : version.indexOf('.');\n\t\tthis.versionMajor = parseInt(version.substr(0, vmLength));\n\t\tthis.versionMinor = parseInt(version.substr(vmLength + 1));\n\t\tif (this.versionMinor.length === 0) {\n\t\t\tthis.versionMinor = 0;\n\t\t}\n\t}\n\n\tnewerThan(version){\n\t\tlet v = new Version(version);\n\n\t\tif (this.versionMajor > v.versionMajor) {\n\t\t\treturn true;\n\t\t} else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tequalOrHigher(version){\n\t\tlet v = new Version(version);\n\n\t\tif (this.versionMajor > v.versionMajor) {\n\t\t\treturn true;\n\t\t} else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tupTo(version){\n\t\treturn !this.newerThan(version);\n\t}\n\n}\n\n\n","\n\nexport const PointAttributeNames = {\n\tPOSITION_CARTESIAN: 0, // float x, y, z;\n\tCOLOR_PACKED: 1, // byte r, g, b, a; \tI: [0,1]\n\tCOLOR_FLOATS_1: 2, // float r, g, b; \tI: [0,1]\n\tCOLOR_FLOATS_255: 3, // float r, g, b; \tI: [0,255]\n\tNORMAL_FLOATS: 4, // float x, y, z;\n\tFILLER: 5,\n\tINTENSITY: 6,\n\tCLASSIFICATION: 7,\n\tNORMAL_SPHEREMAPPED: 8,\n\tNORMAL_OCT16: 9,\n\tNORMAL: 10,\n\tRETURN_NUMBER: 11,\n\tNUMBER_OF_RETURNS: 12,\n\tSOURCE_ID: 13,\n\tINDICES: 14,\n\tSPACING: 15,\n};\n\n\n/**\n * Some types of possible point attribute data formats\n *\n * @class\n */\nconst PointAttributeTypes = {\n\tDATA_TYPE_DOUBLE: {ordinal: 0, size: 8},\n\tDATA_TYPE_FLOAT: {ordinal: 1, size: 4},\n\tDATA_TYPE_INT8: {ordinal: 2, size: 1},\n\tDATA_TYPE_UINT8: {ordinal: 3, size: 1},\n\tDATA_TYPE_INT16: {ordinal: 4, size: 2},\n\tDATA_TYPE_UINT16: {ordinal: 5, size: 2},\n\tDATA_TYPE_INT32: {ordinal: 6, size: 4},\n\tDATA_TYPE_UINT32: {ordinal: 7, size: 4},\n\tDATA_TYPE_INT64: {ordinal: 8, size: 8},\n\tDATA_TYPE_UINT64: {ordinal: 9, size: 8}\n};\n\nlet i = 0;\nfor (let obj in PointAttributeTypes) {\n\tPointAttributeTypes[i] = PointAttributeTypes[obj];\n\ti++;\n}\n\nexport {PointAttributeTypes};\n\n\nclass PointAttribute{\n\t\n\tconstructor(name, type, numElements){\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.numElements = numElements;\n\t\tthis.byteSize = this.numElements * this.type.size;\n\t}\n\n};\n\nPointAttribute.POSITION_CARTESIAN = new PointAttribute(\n\tPointAttributeNames.POSITION_CARTESIAN,\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\nPointAttribute.RGBA_PACKED = new PointAttribute(\n\tPointAttributeNames.COLOR_PACKED,\n\tPointAttributeTypes.DATA_TYPE_INT8, 4);\n\nPointAttribute.COLOR_PACKED = PointAttribute.RGBA_PACKED;\n\nPointAttribute.RGB_PACKED = new PointAttribute(\n\tPointAttributeNames.COLOR_PACKED,\n\tPointAttributeTypes.DATA_TYPE_INT8, 3);\n\nPointAttribute.NORMAL_FLOATS = new PointAttribute(\n\tPointAttributeNames.NORMAL_FLOATS,\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\nPointAttribute.FILLER_1B = new PointAttribute(\n\tPointAttributeNames.FILLER,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\n\nPointAttribute.INTENSITY = new PointAttribute(\n\tPointAttributeNames.INTENSITY,\n\tPointAttributeTypes.DATA_TYPE_UINT16, 1);\n\nPointAttribute.CLASSIFICATION = new PointAttribute(\n\tPointAttributeNames.CLASSIFICATION,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\n\nPointAttribute.NORMAL_SPHEREMAPPED = new PointAttribute(\n\tPointAttributeNames.NORMAL_SPHEREMAPPED,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\n\nPointAttribute.NORMAL_OCT16 = new PointAttribute(\n\tPointAttributeNames.NORMAL_OCT16,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\n\nPointAttribute.NORMAL = new PointAttribute(\n\tPointAttributeNames.NORMAL,\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\t\nPointAttribute.RETURN_NUMBER = new PointAttribute(\n\tPointAttributeNames.RETURN_NUMBER,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\n\t\nPointAttribute.NUMBER_OF_RETURNS = new PointAttribute(\n\tPointAttributeNames.NUMBER_OF_RETURNS,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\n\t\nPointAttribute.SOURCE_ID = new PointAttribute(\n\tPointAttributeNames.SOURCE_ID,\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\n\nPointAttribute.INDICES = new PointAttribute(\n\tPointAttributeNames.INDICES,\n\tPointAttributeTypes.DATA_TYPE_UINT32, 1);\n\nPointAttribute.SPACING = new PointAttribute(\n\tPointAttributeNames.SPACING,\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 1);\n\nexport {PointAttribute};\n\nexport class PointAttributes{\n\n\tconstructor(pointAttributes){\n\t\tthis.attributes = [];\n\t\tthis.byteSize = 0;\n\t\tthis.size = 0;\n\n\t\tif (pointAttributes != null) {\n\t\t\tfor (let i = 0; i < pointAttributes.length; i++) {\n\t\t\t\tlet pointAttributeName = pointAttributes[i];\n\t\t\t\tlet pointAttribute = PointAttribute[pointAttributeName];\n\t\t\t\tthis.attributes.push(pointAttribute);\n\t\t\t\tthis.byteSize += pointAttribute.byteSize;\n\t\t\t\tthis.size++;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tadd(pointAttribute){\n\t\tthis.attributes.push(pointAttribute);\n\t\tthis.byteSize += pointAttribute.byteSize;\n\t\tthis.size++;\n\t};\n\n\thasColors(){\n\t\tfor (let name in this.attributes) {\n\t\t\tlet pointAttribute = this.attributes[name];\n\t\t\tif (pointAttribute.name === PointAttributeNames.COLOR_PACKED) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\thasNormals(){\n\t\tfor (let name in this.attributes) {\n\t\t\tlet pointAttribute = this.attributes[name];\n\t\t\tif (\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_SPHEREMAPPED ||\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_FLOATS ||\n\t\t\t\tpointAttribute === PointAttribute.NORMAL ||\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_OCT16) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n}\n","\n\nimport {Version} from \"../Version.js\";\nimport {PointAttributes, PointAttribute} from \"../loader/PointAttributes.js\";\nimport {InterleavedBuffer} from \"../InterleavedBuffer.js\";\nimport {toInterleavedBufferAttribute} from \"../utils/toInterleavedBufferAttribute.js\";\n\n\n\n/* global onmessage:true postMessage:false */\n/* exported onmessage */\n// http://jsperf.com/uint8array-vs-dataview3/3\nfunction CustomView (buffer) {\n\tthis.buffer = buffer;\n\tthis.u8 = new Uint8Array(buffer);\n\n\tlet tmp = new ArrayBuffer(4);\n\tlet tmpf = new Float32Array(tmp);\n\tlet tmpu8 = new Uint8Array(tmp);\n\n\tthis.getUint32 = function (i) {\n\t\treturn (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\n\t};\n\n\tthis.getUint16 = function (i) {\n\t\treturn (this.u8[i + 1] << 8) | this.u8[i];\n\t};\n\n\tthis.getFloat32 = function (i) {\n\t\ttmpu8[0] = this.u8[i + 0];\n\t\ttmpu8[1] = this.u8[i + 1];\n\t\ttmpu8[2] = this.u8[i + 2];\n\t\ttmpu8[3] = this.u8[i + 3];\n\n\t\treturn tmpf[0];\n\t};\n\n\tthis.getUint8 = function (i) {\n\t\treturn this.u8[i];\n\t};\n}\n\nPotree = {};\n\nonmessage = function (event) {\n\n\tperformance.mark(\"binary-decoder-start\");\n\t\n\tlet buffer = event.data.buffer;\n\tlet pointAttributes = event.data.pointAttributes;\n\tlet numPoints = buffer.byteLength / pointAttributes.byteSize;\n\tlet cv = new CustomView(buffer);\n\tlet version = new Version(event.data.version);\n\tlet nodeOffset = event.data.offset;\n\tlet scale = event.data.scale;\n\tlet spacing = event.data.spacing;\n\tlet hasChildren = event.data.hasChildren;\n\tlet name = event.data.name;\n\t\n\tlet tightBoxMin = [ Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY ];\n\tlet tightBoxMax = [ Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY ];\n\tlet mean = [0, 0, 0];\n\t\n\n\tlet attributeBuffers = {};\n\tlet inOffset = 0;\n\tfor (let pointAttribute of pointAttributes.attributes) {\n\t\t\n\t\tif (pointAttribute.name === PointAttribute.POSITION_CARTESIAN.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\n\t\t\tlet positions = new Float32Array(buff);\n\t\t\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet x, y, z;\n\n\t\t\t\tif (version.newerThan('1.3')) {\n\t\t\t\t\tx = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 0, true) * scale);\n\t\t\t\t\ty = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 4, true) * scale);\n\t\t\t\t\tz = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 8, true) * scale);\n\t\t\t\t} else {\n\t\t\t\t\tx = cv.getFloat32(j * pointAttributes.byteSize + 0, true) + nodeOffset[0];\n\t\t\t\t\ty = cv.getFloat32(j * pointAttributes.byteSize + 4, true) + nodeOffset[1];\n\t\t\t\t\tz = cv.getFloat32(j * pointAttributes.byteSize + 8, true) + nodeOffset[2];\n\t\t\t\t}\n\n\t\t\t\tpositions[3 * j + 0] = x;\n\t\t\t\tpositions[3 * j + 1] = y;\n\t\t\t\tpositions[3 * j + 2] = z;\n\n\t\t\t\tmean[0] += x / numPoints;\n\t\t\t\tmean[1] += y / numPoints;\n\t\t\t\tmean[2] += z / numPoints;\n\n\t\t\t\ttightBoxMin[0] = Math.min(tightBoxMin[0], x);\n\t\t\t\ttightBoxMin[1] = Math.min(tightBoxMin[1], y);\n\t\t\t\ttightBoxMin[2] = Math.min(tightBoxMin[2], z);\n\n\t\t\t\ttightBoxMax[0] = Math.max(tightBoxMax[0], x);\n\t\t\t\ttightBoxMax[1] = Math.max(tightBoxMax[1], y);\n\t\t\t\ttightBoxMax[2] = Math.max(tightBoxMax[2], z);\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.COLOR_PACKED.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\t\tlet colors = new Uint8Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tcolors[4 * j + 0] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\n\t\t\t\tcolors[4 * j + 1] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\n\t\t\t\tcolors[4 * j + 2] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 2);\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.INTENSITY.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\t\tlet intensities = new Float32Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet intensity = cv.getUint16(inOffset + j * pointAttributes.byteSize, true);\n\t\t\t\tintensities[j] = intensity;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.CLASSIFICATION.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints);\n\t\t\tlet classifications = new Uint8Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet classification = cv.getUint8(inOffset + j * pointAttributes.byteSize);\n\t\t\t\tclassifications[j] = classification;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.NORMAL_SPHEREMAPPED.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\n\t\t\tlet normals = new Float32Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet bx = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\n\t\t\t\tlet by = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\n\n\t\t\t\tlet ex = bx / 255;\n\t\t\t\tlet ey = by / 255;\n\n\t\t\t\tlet nx = ex * 2 - 1;\n\t\t\t\tlet ny = ey * 2 - 1;\n\t\t\t\tlet nz = 1;\n\t\t\t\tlet nw = -1;\n\n\t\t\t\tlet l = (nx * (-nx)) + (ny * (-ny)) + (nz * (-nw));\n\t\t\t\tnz = l;\n\t\t\t\tnx = nx * Math.sqrt(l);\n\t\t\t\tny = ny * Math.sqrt(l);\n\n\t\t\t\tnx = nx * 2;\n\t\t\t\tny = ny * 2;\n\t\t\t\tnz = nz * 2 - 1;\n\n\t\t\t\tnormals[3 * j + 0] = nx;\n\t\t\t\tnormals[3 * j + 1] = ny;\n\t\t\t\tnormals[3 * j + 2] = nz;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.NORMAL_OCT16.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\n\t\t\tlet normals = new Float32Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet bx = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\n\t\t\t\tlet by = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\n\n\t\t\t\tlet u = (bx / 255) * 2 - 1;\n\t\t\t\tlet v = (by / 255) * 2 - 1;\n\n\t\t\t\tlet z = 1 - Math.abs(u) - Math.abs(v);\n\n\t\t\t\tlet x = 0;\n\t\t\t\tlet y = 0;\n\t\t\t\tif (z >= 0) {\n\t\t\t\t\tx = u;\n\t\t\t\t\ty = v;\n\t\t\t\t} else {\n\t\t\t\t\tx = -(v / Math.sign(v) - 1) / Math.sign(u);\n\t\t\t\t\ty = -(u / Math.sign(u) - 1) / Math.sign(v);\n\t\t\t\t}\n\n\t\t\t\tlet length = Math.sqrt(x * x + y * y + z * z);\n\t\t\t\tx = x / length;\n\t\t\t\ty = y / length;\n\t\t\t\tz = z / length;\n\t\t\t\t\n\t\t\t\tnormals[3 * j + 0] = x;\n\t\t\t\tnormals[3 * j + 1] = y;\n\t\t\t\tnormals[3 * j + 2] = z;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t} else if (pointAttribute.name === PointAttribute.NORMAL.name) {\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\n\t\t\tlet normals = new Float32Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet x = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 0, true);\n\t\t\t\tlet y = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 4, true);\n\t\t\t\tlet z = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 8, true);\n\t\t\t\t\n\t\t\t\tnormals[3 * j + 0] = x;\n\t\t\t\tnormals[3 * j + 1] = y;\n\t\t\t\tnormals[3 * j + 2] = z;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t}\n\n\t\tinOffset += pointAttribute.byteSize;\n\t}\n\n\t//let debugNodes = [\"r026\", \"r0226\",\"r02274\"];\n\t//if(debugNodes.includes(name)){\n\tif(false){\n\t\tconsole.log(\"estimate spacing!\");\n\n\n\t\tlet sparseGrid = new Map();\n\t\tlet gridSize = 16;\n\n\t\tlet tightBoxSize = tightBoxMax.map( (a, i) => a - tightBoxMin[i]);\n\t\tlet cubeLength = Math.max(...tightBoxSize);\n\t\tlet cube = {\n\t\t\tmin: tightBoxMin,\n\t\t\tmax: tightBoxMin.map(v => v + cubeLength)\n\t\t};\n\n\t\tlet positions = new Float32Array(attributeBuffers[PointAttribute.POSITION_CARTESIAN.name].buffer);\n\t\tfor(let i = 0; i < numPoints; i++){\n\t\t\tlet x = positions[3 * i + 0];\n\t\t\tlet y = positions[3 * i + 1];\n\t\t\tlet z = positions[3 * i + 2];\n\n\t\t\tlet ix = Math.max(0, Math.min(gridSize * (x - cube.min[0]) / cubeLength, gridSize - 1));\n\t\t\tlet iy = Math.max(0, Math.min(gridSize * (y - cube.min[1]) / cubeLength, gridSize - 1));\n\t\t\tlet iz = Math.max(0, Math.min(gridSize * (z - cube.min[2]) / cubeLength, gridSize - 1));\n\n\t\t\tix = Math.floor(ix);\n\t\t\tiy = Math.floor(iy);\n\t\t\tiz = Math.floor(iz);\n\n\t\t\tlet cellIndex = ix | (iy << 8) | (iz << 16);\n\t\t\t\n\t\t\tif(!sparseGrid.has(cellIndex)){\n\t\t\t\tsparseGrid.set(cellIndex, []);\n\t\t\t}\n\n\t\t\tsparseGrid.get(cellIndex).push(i);\n\t\t}\n\n\t\tlet kNearest = (pointIndex, candidates, numNearest) => {\n\t\t\t\n\t\t\tlet x = positions[3 * pointIndex + 0];\n\t\t\tlet y = positions[3 * pointIndex + 1];\n\t\t\tlet z = positions[3 * pointIndex + 2];\n\n\t\t\tlet candidateDistances = [];\n\n\t\t\tfor(let candidateIndex of candidates){\n\t\t\t\tif(candidateIndex === pointIndex){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet cx = positions[3 * candidateIndex + 0];\n\t\t\t\tlet cy = positions[3 * candidateIndex + 1];\n\t\t\t\tlet cz = positions[3 * candidateIndex + 2];\n\n\t\t\t\tlet squaredDistance = (cx - x) ** 2 + (cy - y) ** 2 + (cz - z) ** 2;\n\n\t\t\t\tcandidateDistances.push({candidateInde: candidateIndex, squaredDistance: squaredDistance});\n\t\t\t}\n\n\t\t\tcandidateDistances.sort( (a, b) => a.squaredDistance - b.squaredDistance);\n\t\t\tlet nearest = candidateDistances.slice(0, numNearest);\n\n\t\t\treturn nearest;\n\t\t};\n\n\t\tlet meansBuffer = new ArrayBuffer(numPoints * 4);\n\t\tlet means = new Float32Array(meansBuffer);\n\n\t\tfor(let [key, value] of sparseGrid){\n\t\t\t\n\t\t\tfor(let pointIndex of value){\n\n\t\t\t\tif(value.length === 1){\n\t\t\t\t\tmeans[pointIndex] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet [ix, iy, iz] = [(key & 255), ((key >> 8) & 255), ((key >> 16) & 255)];\n\t\t\t\t\n\t\t\t\t//let candidates = value;\n\t\t\t\tlet candidates = [];\n\t\t\t\tfor(let i of [-1, 0, 1]){\n\t\t\t\t\tfor(let j of [-1, 0, 1]){\n\t\t\t\t\t\tfor(let k of [-1, 0, 1]){\n\t\t\t\t\t\t\tlet cellIndex = (ix + i) | ((iy + j) << 8) | ((iz + k) << 16);\n\n\t\t\t\t\t\t\tif(sparseGrid.has(cellIndex)){\n\t\t\t\t\t\t\t\tcandidates.push(...sparseGrid.get(cellIndex));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tlet nearestNeighbors = kNearest(pointIndex, candidates, 10);\n\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor(let neighbor of nearestNeighbors){\n\t\t\t\t\tsum += Math.sqrt(neighbor.squaredDistance);\n\t\t\t\t}\n\n\t\t\t\t//let mean = sum / nearestNeighbors.length;\n\t\t\t\tlet mean = Math.sqrt(Math.max(...nearestNeighbors.map(n => n.squaredDistance)));\n\n\t\t\t\tif(Number.isNaN(mean)){\n\t\t\t\t\tdebugger;\n\t\t\t\t}\n\n\n\t\t\t\tmeans[pointIndex] = mean;\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet maxMean = Math.max(...means);\n\t\tlet minMean = Math.min(...means);\n\n\t\t//let colors = new Uint8Array(attributeBuffers[PointAttribute.COLOR_PACKED.name].buffer);\n\t\t//for(let i = 0; i < numPoints; i++){\n\t\t//\tlet v = means[i] / 0.05;\n\n\t\t//\tcolors[4 * i + 0] = 255 * v;\n\t\t//\tcolors[4 * i + 1] = 255 * v;\n\t\t//\tcolors[4 * i + 2] = 255 * v;\n\t\t//}\n\n\t\tattributeBuffers[PointAttribute.SPACING.name] = { buffer: meansBuffer, attribute: PointAttribute.SPACING };\n\n\n\t}\n\n\n\t{ // add indices\n\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\tlet indices = new Uint32Array(buff);\n\n\t\tfor (let i = 0; i < numPoints; i++) {\n\t\t\tindices[i] = i;\n\t\t}\n\t\t\n\t\tattributeBuffers[PointAttribute.INDICES.name] = { buffer: buff, attribute: PointAttribute.INDICES };\n\t}\n\n\tperformance.mark(\"binary-decoder-end\");\n\n\t//{ // print timings\n\t//\t//performance.measure(\"spacing\", \"spacing-start\", \"spacing-end\");\n\t//\tperformance.measure(\"binary-decoder\", \"binary-decoder-start\", \"binary-decoder-end\");\n\t//\tlet measure = performance.getEntriesByType(\"measure\")[0];\n\t//\tlet dpp = 1000 * measure.duration / numPoints;\n\t//\tlet debugMessage = `${measure.duration.toFixed(3)} ms, ${numPoints} points, ${dpp.toFixed(3)} µs / point`;\n\t//\tconsole.log(debugMessage);\n\t//}\n\n\tperformance.clearMarks();\n\tperformance.clearMeasures();\n\n\tlet message = {\n\t\tbuffer: buffer,\n\t\tmean: mean,\n\t\tattributeBuffers: attributeBuffers,\n\t\ttightBoundingBox: { min: tightBoxMin, max: tightBoxMax },\n\t\t//estimatedSpacing: estimatedSpacing,\n\t};\n\n\tlet transferables = [];\n\tfor (let property in message.attributeBuffers) {\n\t\ttransferables.push(message.attributeBuffers[property].buffer);\n\t}\n\ttransferables.push(buffer);\n\n\tpostMessage(message, transferables);\n};\n"],"names":[],"mappings":"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"}